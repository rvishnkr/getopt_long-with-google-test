# ------------------------------------------------
# Simple Makefile to run command line arguments 
# unit tests and to generate a command line driver
#
# Author: ravishankar@u.boisestate.edu
# Date  : 18 May 2017
# ------------------------------------------------

# Synopsis:
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# For more information on makefiles:
# https://www.gnu.org/software/make/manual/html_node/Introduction.html

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = deps/googletest/googletest

# Where to find user code, relative to where this file is.
USER_DIR = src

# Different directories, relative to where this file is.
BIN = bin
OBJ = obj
LIB = lib

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread
CFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = $(BIN)/CmdLine_unittests 

# All Google Test headers. Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h


# Builds gtest.a and gtest_main.a.
# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJ)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJ)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(LIB)/gtest.a : $(OBJ)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(LIB)/gtest_main.a : $(OBJ)/gtest-all.o $(OBJ)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a/all test/s.  
# A test should link with either gtest.a or gtest_main.a, 
# depending on whether it defines its own main() function.
$(BIN)/%_unittests: $(USER_DIR)/%_unittests.o $(USER_DIR)/%.o \
                    $(LIB)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(USER_DIR)/%_unittests.o: $(USER_DIR)/%_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 

# Builds all object files
$(USER_DIR)/%.o: $(USER_DIR)/%.cpp
	$(CXX) -c -o $@ $^ $(CFLAGS)

# Builds the driver file 
CmdLineDriver: $(BIN)/CmdLineDriver

$(BIN)/CmdLineDriver: $(USER_DIR)/CmdLineDriver.o $(USER_DIR)/CmdLine.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(USER_DIR)/CmdLineDriver.o: $(USER_DIR)/CmdLineDriver.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 

# A phony target is one that is not really the name of a file; rather it 
# is just a name for a recipe to be executed when you make an explicit request. 
# There are two reasons to use a phony target: to avoid a conflict with a file 
# of the same name, and to improve performance. 
.PHONY: test
.PHONY: clean

# Runs all tests
test: $(TESTS)
	$(BIN)/CmdLine_unittests

# Clean up when done. 
# Removes all object, library and executable files
clean: 
	rm -f $(BIN)/*
	rm -f $(OBJ)/*
	rm -f $(LIB)/*
	rm -f $(USER_DIR)/*.o
	
